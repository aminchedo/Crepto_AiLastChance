version: '3.8'

services:
  # ==================================================
  # PROXY SERVER (CORS-Free with Auto-Fallback)
  # ==================================================
  proxy:
    build:
      context: .
      dockerfile: Dockerfile.proxy
    container_name: crepto_proxy
    environment:
      # Proxy Configuration
      - PORT=3002
      - NODE_ENV=production
      
      # Market Data APIs
      - CMC_API_KEY=${CMC_API_KEY}
      - CMC_API_KEY_2=${CMC_API_KEY_2}
      - CRYPTOCOMPARE_KEY=${CRYPTOCOMPARE_KEY}
      
      # Block Explorers
      - ETHERSCAN_KEY=${ETHERSCAN_KEY}
      - ETHERSCAN_KEY_2=${ETHERSCAN_KEY_2}
      - BSCSCAN_KEY=${BSCSCAN_KEY}
      - TRONSCAN_KEY=${TRONSCAN_KEY}
      
      # News API (Updated)
      - NEWSAPI_KEY=${NEWSAPI_KEY}
      
      # Optional APIs
      - SANTIMENT_KEY=${SANTIMENT_KEY:-}
      - LUNARCRUSH_KEY=${LUNARCRUSH_KEY:-}
      - THETIE_KEY=${THETIE_KEY:-}
      - WHALEALERT_KEY=${WHALEALERT_KEY:-}
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # POSTGRESQL DATABASE
  # ==================================================
  postgres:
    image: postgres:15-alpine
    container_name: crepto_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-crepto_ai_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # REDIS CACHE
  # ==================================================
  redis:
    image: redis:7-alpine
    container_name: crepto_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # FASTAPI BACKEND
  # ==================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: crepto_backend
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # Environment
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-False}
      
      # Proxy URL (for backend to use proxy if needed)
      - PROXY_SERVER_URL=http://proxy:3002
    volumes:
      - ./backend/models:/app/models
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # REACT FRONTEND
  # ==================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.enhanced
      args:
        - VITE_PROXY_SERVER_URL=http://proxy:3002
        - VITE_BACKEND_URL=http://backend:8000
        - VITE_USE_REAL_APIS=true
    container_name: crepto_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
      - proxy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # NGINX REVERSE PROXY
  # ==================================================
  nginx:
    image: nginx:alpine
    container_name: crepto_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/docker.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
      - proxy
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # PROMETHEUS MONITORING
  # ==================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: crepto_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================
  # GRAFANA DASHBOARD
  # ==================================================
  grafana:
    image: grafana/grafana:latest
    container_name: crepto_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - crepto_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==================================================
# VOLUMES
# ==================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==================================================
# NETWORKS
# ==================================================
networks:
  crepto_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
